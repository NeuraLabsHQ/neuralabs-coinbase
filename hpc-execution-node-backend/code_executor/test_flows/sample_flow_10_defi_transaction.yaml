# Sample Flow 10: DeFi Transaction Builder
flow_definition:
  nodes:
    start_node:
      type: start
      node_description: "Initial node that receives input data"
      description: "Start DeFi transaction building"
      processing_message: "Initializing transaction builder..."
      tags: ["flow-control", "entry-point"]
      layer: 3
      input_schema:
        initial_message:
          type: string
          description: "Initial user message with transaction request"
          required: true
      output_schema:
        initial_message:
          type: string
          description: "Pass through initial message"
          required: true
    
    transaction_parser:
      type: llm_structured
      node_description: "Extracts structured data using Large Language Models"
      description: "Parse transaction intent from user input"
      processing_message: "Parsing transaction request..."
      tags: ["ai", "data-extraction"]
      layer: 3
      parameters:
        model: null
        temperature: 0.1
        max_tokens: 300
        wrapper_prompt: |
          Parse this DeFi transaction request: {initial_message}
          
          Extract:
          - transaction_type: "transfer", "mint", "swap", "stake", or "custom"
          - recipient: wallet address (for transfers)
          - amount: numeric amount
          - token_type: token identifier
          - contract_address: if specified
          - function_name: if custom contract call
          
          Return structured data for the transaction.
      input_schema:
        initial_message:
          type: string
          description: "User transaction request"
          required: true
      output_schema:
        transaction_type:
          type: string
          description: "Type of transaction"
          required: true
        recipient:
          type: string
          description: "Recipient address"
          required: false
        amount:
          type: string
          description: "Transaction amount"
          required: false
        token_type:
          type: string
          description: "Token type identifier"
          required: false
        contract_address:
          type: string
          description: "Smart contract address"
          required: false
        function_name:
          type: string
          description: "Contract function name"
          required: false
    
    balance_checker:
      type: read_blockchain_data
      node_description: "Reads data from blockchain networks including contract states, balances, and transaction history"
      description: "Check sender balance before transaction"
      processing_message: "Checking account balance..."
      tags: ["blockchain", "sui", "validation"]
      layer: 3
      parameters:
        node_url: "https://fullnode.mainnet.sui.io"
        network: "mainnet"
        api_key: ""
      input_schema:
        query_type:
          type: string
          description: "Type of blockchain query to perform"
          required: true
        address:
          type: string
          description: "Wallet address to query"
          required: true
        parameters:
          type: json
          description: "Additional parameters for the query"
          required: false
      output_schema:
        data:
          type: json
          description: "Query result data"
          required: true
        success:
          type: bool
          description: "Whether the query succeeded"
          required: true
        error:
          type: string
          description: "Error message if query failed"
          required: false
        metadata:
          type: json
          description: "Additional metadata about the query"
          required: false
    
    contract_state_reader:
      type: read_blockchain_data
      node_description: "Reads data from blockchain networks including contract states, balances, and transaction history"
      description: "Read contract state if needed"
      processing_message: "Reading contract state..."
      tags: ["blockchain", "sui", "contracts"]
      layer: 3
      parameters:
        node_url: "https://fullnode.mainnet.sui.io"
        network: "mainnet"
        api_key: ""
      input_schema:
        query_type:
          type: string
          description: "Type of blockchain query to perform"
          required: true
        address:
          type: string
          description: "Contract address to query"
          required: true
        parameters:
          type: json
          description: "Additional parameters for the query"
          required: false
      output_schema:
        data:
          type: json
          description: "Query result data"
          required: true
        success:
          type: bool
          description: "Whether the query succeeded"
          required: true
        error:
          type: string
          description: "Error message if query failed"
          required: false
        metadata:
          type: json
          description: "Additional metadata about the query"
          required: false
    
    transaction_config:
      type: constants
      node_description: "Provides static values that remain constant during flow execution"
      description: "Transaction building configuration"
      processing_message: "Loading transaction settings..."
      tags: ["input", "static-data", "config"]
      layer: 3
      parameters:
        gas_settings:
          default_budget: "20000000"
          transfer_budget: "10000000"
          mint_budget: "50000000"
          contract_call_budget: "30000000"
          gas_price: "1000"
        default_contracts:
          sui_coin: "0x2"
          nft_collection: "0xabc123..."
          dex_router: "0xdex456..."
        validation_rules:
          min_amount: "1000"
          max_amount: "1000000000000"
          address_pattern: "^0x[a-fA-F0-9]{64}$"
      input_schema: {}
      output_schema:
        gas_settings:
          type: json
          description: "Gas configuration settings"
          required: true
        default_contracts:
          type: json
          description: "Default contract addresses"
          required: true
        validation_rules:
          type: json
          description: "Transaction validation rules"
          required: true
    
    validation_merger:
      type: merger
      node_description: "Combines multiple data inputs into a single output"
      description: "Merge validation data"
      processing_message: "Validating transaction parameters..."
      tags: ["utility", "data-manipulation"]
      layer: 3
      parameters: {}
      input_schema:
        data1:
          type: any
          description: "First data input"
          required: true
        data2:
          type: any
          description: "Second data input"
          required: true
      output_schema:
        merged_data:
          type: any
          description: "Combined data result"
          required: true
    
    transaction_validator:
      type: case
      node_description: "Conditional logic element that routes execution based on data comparisons"
      description: "Validate transaction parameters"
      processing_message: "Validating transaction..."
      tags: ["flow-control", "validation", "conditional"]
      layer: 3
      parameters:
        cases:
          - valid_transaction:
              variable1: "balance_sufficient"
              variable2: true
              compare: "=="
          - insufficient_balance:
              variable1: "balance_sufficient"
              variable2: false
              compare: "=="
      input_schema:
        balance_sufficient:
          type: bool
          description: "Whether balance is sufficient"
          required: true
        amount_valid:
          type: bool
          description: "Whether amount is valid"
          required: true
        address_valid:
          type: bool
          description: "Whether addresses are valid"
          required: true
      output_schema:
        validation_result:
          type: string
          description: "Validation result"
          required: true
    
    transfer_builder:
      type: build_transaction_json
      node_description: "Creates a transaction payload for blockchain interaction"
      description: "Build SUI transfer transaction"
      processing_message: "Building transfer transaction..."
      tags: ["blockchain", "transaction", "transfer"]
      layer: 3
      parameters:
        node_url: "https://fullnode.mainnet.sui.io"
        contract_address: "0x2"
        function_name: "coin::transfer"
        function_args: ["recipient", "amount"]
      input_schema:
        recipient:
          type: string
          description: "Recipient wallet address"
          required: true
        amount:
          type: string
          description: "Amount to transfer"
          required: true
        gas_budget:
          type: string
          description: "Gas budget for transaction"
          required: false
      output_schema:
        transaction_json:
          type: json
          description: "The transaction payload ready for signing"
          required: true
    
    nft_mint_builder:
      type: build_transaction_json
      node_description: "Creates a transaction payload for blockchain interaction"
      description: "Build NFT minting transaction"
      processing_message: "Building NFT mint transaction..."
      tags: ["blockchain", "transaction", "nft"]
      layer: 3
      parameters:
        node_url: "https://fullnode.mainnet.sui.io"
        contract_address: "0xnft_package..."
        function_name: "nft::mint"
        function_args: ["name", "description", "image_url", "recipient"]
      input_schema:
        name:
          type: string
          description: "NFT name"
          required: true
        description:
          type: string
          description: "NFT description"
          required: true
        image_url:
          type: string
          description: "NFT image URL"
          required: true
        recipient:
          type: string
          description: "NFT recipient"
          required: true
      output_schema:
        transaction_json:
          type: json
          description: "The transaction payload ready for signing"
          required: true
    
    custom_contract_builder:
      type: build_transaction_json
      node_description: "Creates a transaction payload for blockchain interaction"
      description: "Build custom contract transaction"
      processing_message: "Building contract transaction..."
      tags: ["blockchain", "transaction", "contract"]
      layer: 3
      parameters:
        node_url: "https://fullnode.mainnet.sui.io"
        contract_address: ""
        function_name: ""
        function_args: []
      input_schema:
        contract_address:
          type: string
          description: "Contract address"
          required: true
        function_name:
          type: string
          description: "Function to call"
          required: true
        function_args:
          type: list
          description: "Function arguments"
          required: false
      output_schema:
        transaction_json:
          type: json
          description: "The transaction payload ready for signing"
          required: true
    
    transaction_router:
      type: flow_select
      node_description: "Routes execution to different sub-flows based on input conditions"
      description: "Route to appropriate transaction builder"
      processing_message: "Selecting transaction type..."
      tags: ["flow-control", "routing"]
      layer: 3
      parameters:
        flows_to_switch:
          - transfer_flow
          - mint_flow
          - custom_flow
      input_schema:
        transaction_type:
          type: string
          description: "Type of transaction to build"
          required: true
      output_schema:
        selected_flow:
          type: string
          description: "Selected flow path"
          required: true
    
    transaction_formatter:
      type: llm_text
      node_description: "Generates text using Large Language Models"
      description: "Format transaction summary"
      processing_message: "Generating transaction summary..."
      tags: ["ai", "text-generation"]
      layer: 3
      parameters:
        model: null
        temperature: 0.3
        max_tokens: 400
        wrapper_prompt: |
          Create a user-friendly transaction summary:
          
          Transaction Type: {transaction_type}
          Transaction Data: {transaction_json}
          Validation Results: {validation_data}
          
          Provide:
          1. Clear transaction summary
          2. Gas cost estimation
          3. Security considerations
          4. Next steps for user
          5. Risk warnings if applicable
          
          Make it clear and actionable for the user.
      input_schema:
        transaction_type:
          type: string
          description: "Type of transaction"
          required: true
        transaction_json:
          type: json
          description: "Built transaction"
          required: true
        validation_data:
          type: json
          description: "Validation results"
          required: true
      output_schema:
        llm_output:
          type: string
          description: "Transaction summary"
          required: true
    
    end_node:
      type: end
      node_description: "Terminal point of the flow execution"
      description: "Complete transaction building"
      processing_message: "Finalizing transaction..."
      tags: ["flow-control", "exit-point"]
      layer: 3
      input_schema:
        text_input:
          type: string
          description: "Transaction summary"
          required: true
        transaction_data:
          type: json
          description: "Built transaction"
          required: false
      output_schema:
        text_output:
          type: string
          description: "Final transaction summary"
          required: true
        transaction_json:
          type: json
          description: "Transaction ready for signing"
          required: false
  
  connections:
    # Control flow
    - from_id: start_node
      to_id: transaction_parser
      connection_type: control
    
    - from_id: transaction_parser
      to_id: balance_checker
      connection_type: control
    
    - from_id: balance_checker
      to_id: validation_merger
      connection_type: control
    
    - from_id: transaction_config
      to_id: validation_merger
      connection_type: control
    
    - from_id: validation_merger
      to_id: transaction_validator
      connection_type: control
    
    - from_id: transaction_validator
      to_id: transaction_router
      connection_type: control
    
    - from_id: transaction_router
      to_id: transfer_builder
      connection_type: control
    
    - from_id: transfer_builder
      to_id: transaction_formatter
      connection_type: control
    
    - from_id: transaction_formatter
      to_id: end_node
      connection_type: control
    
    # Data connections
    - from_id: start_node
      to_id: transaction_parser
      connection_type: data
      from_output: "start_node:initial_message"
      to_input: "transaction_parser:initial_message"
    
    # Balance checking
    - from_id: transaction_parser
      to_id: balance_checker
      connection_type: data
      from_output: "transaction_parser:recipient"
      to_input: "balance_checker:address"
    
    # Validation
    - from_id: balance_checker
      to_id: validation_merger
      connection_type: data
      from_output: "balance_checker:data"
      to_input: "validation_merger:data1"
    
    - from_id: transaction_config
      to_id: validation_merger
      connection_type: data
      from_output: "transaction_config:validation_rules"
      to_input: "validation_merger:data2"
    
    # Transaction building
    - from_id: transaction_parser
      to_id: transfer_builder
      connection_type: data
      from_output: "transaction_parser:recipient"
      to_input: "transfer_builder:recipient"
    
    - from_id: transaction_parser
      to_id: transfer_builder
      connection_type: data
      from_output: "transaction_parser:amount"
      to_input: "transfer_builder:amount"
    
    - from_id: transaction_config
      to_id: transfer_builder
      connection_type: data
      from_output: "transaction_config:gas_settings"
      to_input: "transfer_builder:gas_budget"
    
    # Transaction routing
    - from_id: transaction_parser
      to_id: transaction_router
      connection_type: data
      from_output: "transaction_parser:transaction_type"
      to_input: "transaction_router:transaction_type"
    
    # Final formatting
    - from_id: transaction_parser
      to_id: transaction_formatter
      connection_type: data
      from_output: "transaction_parser:transaction_type"
      to_input: "transaction_formatter:transaction_type"
    
    - from_id: transfer_builder
      to_id: transaction_formatter
      connection_type: data
      from_output: "transfer_builder:transaction_json"
      to_input: "transaction_formatter:transaction_json"
    
    - from_id: validation_merger
      to_id: transaction_formatter
      connection_type: data
      from_output: "validation_merger:merged_data"
      to_input: "transaction_formatter:validation_data"
    
    # Final output
    - from_id: transaction_formatter
      to_id: end_node
      connection_type: data
      from_output: "transaction_formatter:llm_output"
      to_input: "end_node:text_input"
    
    - from_id: transfer_builder
      to_id: end_node
      connection_type: data
      from_output: "transfer_builder:transaction_json"
      to_input: "end_node:transaction_data"
  
  start_element: start_node

# Metadata
metadata:
  flow_name: "DeFi Transaction Builder"
  version: "1.0.0"
  description: "Builds and validates DeFi transactions on SUI blockchain with balance checking and security validation"
  author: "NeuraLabs"
  tags: ["blockchain", "defi", "transactions", "sui", "validation"]