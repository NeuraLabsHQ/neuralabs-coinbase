digraph SmartContractArchitecture {
    // Dark mode styling
    bgcolor="#1a1a1a"
    fontcolor="white"
    node [fontcolor="white", style="filled", fontname="Arial", fontsize=10]
    edge [fontcolor="white"]
    
    // Color scheme
    // Functions: #4a9eff (light blue)
    // Variables: #ff9f4a (orange)
    // Contract boxes: #2d2d2d (dark gray)
    // Read connections: white
    // Write connections: #87CEEB (light blue)
    
    compound=true
    
    // MasterAccessControl Contract
    subgraph cluster_MasterAccessControl {
        label="MasterAccessControl"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        MAC_accessRights [label="accessRights\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        MAC_constructor [label="constructor()\n→ void\nGrants deployer access", fillcolor="#4a9eff", shape="box"]
        MAC_grantAccess [label="grantAccess(address,address)\n→ void\nGrants caller access to contract", fillcolor="#4a9eff", shape="box"]
        MAC_revokeAccess [label="revokeAccess(address,address)\n→ void\nRevokes caller access", fillcolor="#4a9eff", shape="box"]
        MAC_grantSelfAccess [label="grantSelfAccess(address)\n→ void\nContract grants access to address", fillcolor="#4a9eff", shape="box"]
        MAC_revokeSelfAccess [label="revokeSelfAccess(address)\n→ void\nContract revokes access", fillcolor="#4a9eff", shape="box"]
        MAC_hasAccess [label="hasAccess(address,address)\n→ bool\nChecks if caller has access", fillcolor="#4a9eff", shape="box"]
        MAC_selfCheckAccess [label="selfCheckAccess(address)\n→ bool\nContract checks access", fillcolor="#4a9eff", shape="box"]
    }
    
    // NFTAccessControl Contract
    subgraph cluster_NFTAccessControl {
        label="NFTAccessControl"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        NAC_accessControl [label="accessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NAC_aiServiceAgreement [label="aiServiceAgreementManagement\n(IAIServiceAgreementManagement)", fillcolor="#ff9f4a", shape="box"]
        NAC_nftAccess [label="nftAccess\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_defaultAccessLevel [label="defaultAccessLevel\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_maxAccessLevel [label="maxAccessLevel\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_userAccessList [label="userAccessList\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_userAccessIndex [label="userAccessIndex\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_nftAccessList [label="nftAccessList\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAC_nftAccessIndex [label="nftAccessIndex\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        NAC_constructor [label="constructor(address)\n→ void\nInitializes with MasterAccessControl", fillcolor="#4a9eff", shape="box"]
        NAC_setAIServiceAgreement [label="setAIServiceAgreementManagement(address)\n→ void\nSets AI service contract", fillcolor="#4a9eff", shape="box"]
        NAC_setMaxAccessLevel [label="setMaxAccessLevel(uint256,AccessLevel)\n→ void\nSets max access level for NFT", fillcolor="#4a9eff", shape="box"]
        NAC_setDefaultAccessLevel [label="setDefaultAccessLevel(uint256,AccessLevel)\n→ void\nSets default access for all users", fillcolor="#4a9eff", shape="box"]
        NAC_grantAccess [label="grantAccess(uint256,address,AccessLevel)\n→ void\nGrants specific access to user", fillcolor="#4a9eff", shape="box"]
        NAC_revokeAccess [label="revokeAccess(uint256,address)\n→ void\nRevokes access with sales protection", fillcolor="#4a9eff", shape="box"]
        NAC_getAllAccessForUser [label="getAllAccessForUser(address)\n→ AccessEntry[]\nReturns all NFT access for user", fillcolor="#4a9eff", shape="box"]
        NAC_getAccessLevel [label="getAccessLevel(uint256,address)\n→ AccessLevel\nReturns user's access level", fillcolor="#4a9eff", shape="box"]
        NAC_checkMinimumAccess [label="checkMinimumAccess(uint256,address,AccessLevel)\n→ bool\nChecks if user has min access", fillcolor="#4a9eff", shape="box"]
        NAC_getAllUsersAccessForNFT [label="getAllUsersAccessForNFT(uint256)\n→ UserAccess[]\nReturns all users with access", fillcolor="#4a9eff", shape="box"]
        NAC_canRevokeAccess [label="canRevokeAccess(uint256,address)\n→ bool\nChecks if access can be revoked", fillcolor="#4a9eff", shape="box"]
        NAC_updateUserAccessList [label="_updateUserAccessList\n(private)\nInternal function", fillcolor="#4a9eff", shape="box"]
        NAC_updateNFTAccessList [label="_updateNFTAccessList\n(private)\nInternal function", fillcolor="#4a9eff", shape="box"]
        NAC_updateUserAccessListOnRevoke [label="_updateUserAccessListOnRevoke\n(private)\nRemoves from user list", fillcolor="#4a9eff", shape="box"]
        NAC_updateNFTAccessListOnRevoke [label="_updateNFTAccessListOnRevoke\n(private)\nRemoves from NFT list", fillcolor="#4a9eff", shape="box"]
    }
    
    // NFTContract
    subgraph cluster_NFTContract {
        label="NFTContract"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        NC_masterAccessControl [label="masterAccessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NC_nftAccessControl [label="nftAccessControl\n(NFTAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NC_nftMetadata [label="nftMetadata\n(NFTMetadata)", fillcolor="#ff9f4a", shape="box"]
        NC_monetization [label="monetization\n(IMonetization)", fillcolor="#ff9f4a", shape="box"]
        NC_nfts [label="nfts\n(mapping → NFTInfo)", fillcolor="#ff9f4a", shape="box"]
        NC_locked [label="locked\n(mapping → LockStatus)", fillcolor="#ff9f4a", shape="box"]
        NC_balances [label="balances\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NC_tokenApprovals [label="tokenApprovals\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NC_operatorApprovals [label="operatorApprovals\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NC_totalSupply [label="totalSupply\n(uint256)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        NC_constructor [label="constructor(4 addresses)\n→ void\nInitializes all contracts", fillcolor="#4a9eff", shape="box"]
        NC_setMonetization [label="setMonetizationContract(address)\n→ void\nSets monetization contract", fillcolor="#4a9eff", shape="box"]
        NC_createNFT [label="createNFT(string,uint8)\n→ uint256\nMints new NFT with ownership level", fillcolor="#4a9eff", shape="box"]
        NC_burnNFT [label="burnNFT(uint256)\n→ void\nPermanently destroys NFT", fillcolor="#4a9eff", shape="box"]
        NC_lockNFT [label="lockNFT(uint256)\n→ void\nLocks NFT preventing transfers", fillcolor="#4a9eff", shape="box"]
        NC_startUnlocking [label="startUnlocking(uint256)\n→ void\nInitiates unlock process", fillcolor="#4a9eff", shape="box"]
        NC_markCanBeUnlocked [label="markCanBeUnlocked(uint256)\n→ void\nMarks NFT ready to unlock", fillcolor="#4a9eff", shape="box"]
        NC_unlockNFT [label="unlockNFT(uint256)\n→ void\nCompletes unlock process", fillcolor="#4a9eff", shape="box"]
        NC_transferNFT [label="transferNFT(uint256,address)\n→ void\nConvenience transfer function", fillcolor="#4a9eff", shape="box"]
        NC_getLockStatus [label="getLockStatus(uint256)\n→ LockStatus\nReturns current lock status", fillcolor="#4a9eff", shape="box"]
        NC_getNFTInfo [label="getNFTInfo(uint256)\n→ NFTInfo\nReturns all NFT information", fillcolor="#4a9eff", shape="box"]
        NC_safeTransferFrom [label="safeTransferFrom(...)\n→ void\nERC721 safe transfer", fillcolor="#4a9eff", shape="box"]
        NC_transferFrom [label="transferFrom(from,to,tokenId)\n→ void\nERC721 transfer", fillcolor="#4a9eff", shape="box"]
        NC_transfer [label="_transfer(from,to,tokenId)\n→ void\nInternal transfer logic", fillcolor="#4a9eff", shape="box"]
        NC_ownerOf [label="ownerOf(tokenId)\n→ address\nReturns NFT owner", fillcolor="#4a9eff", shape="box"]
        NC_balanceOf [label="balanceOf(address)\n→ uint256\nReturns balance", fillcolor="#4a9eff", shape="box"]
        NC_approve [label="approve(to,tokenId)\n→ void\nApproves token transfer", fillcolor="#4a9eff", shape="box"]
        NC_setApprovalForAll [label="setApprovalForAll(operator,approved)\n→ void\nSets operator approval", fillcolor="#4a9eff", shape="box"]
        NC_getApproved [label="getApproved(tokenId)\n→ address\nReturns approved address", fillcolor="#4a9eff", shape="box"]
        NC_isApprovedForAll [label="isApprovedForAll(owner,operator)\n→ bool\nChecks operator approval", fillcolor="#4a9eff", shape="box"]
        NC_exists [label="_exists(tokenId)\n→ bool\n(internal) Checks existence", fillcolor="#4a9eff", shape="box"]
        NC_isApprovedOrOwner [label="_isApprovedOrOwner(spender,tokenId)\n→ bool\n(internal) Auth check", fillcolor="#4a9eff", shape="box"]
        NC_safeTransfer [label="_safeTransfer(...)\n→ void\n(internal) Safe transfer", fillcolor="#4a9eff", shape="box"]
        NC_checkOnERC721Received [label="_checkOnERC721Received(...)\n→ bool\n(private) Receiver check", fillcolor="#4a9eff", shape="box"]
        NC_isContract [label="isContract(address)\n→ bool\n(internal) Contract check", fillcolor="#4a9eff", shape="box"]
    }
    
    // NFTMetadata
    subgraph cluster_NFTMetadata {
        label="NFTMetadata"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        NM_accessControl [label="accessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NM_nftAccessControl [label="nftAccessControl\n(NFTAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NM_metadataMap [label="metadataMap\n(mapping → Metadata)", fillcolor="#ff9f4a", shape="box"]
        NM_replicaMap [label="replicaMap\n(mapping → Replica)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        NM_constructor [label="constructor(2 addresses)\n→ void\nInitializes access controls", fillcolor="#4a9eff", shape="box"]
        NM_createMetadata [label="createMetadata(uint256,Metadata)\n→ void\nCreates metadata for NFT", fillcolor="#4a9eff", shape="box"]
        NM_replicateNFT [label="replicateNFT(uint256,uint256)\n→ void\nCreates replica of metadata", fillcolor="#4a9eff", shape="box"]
        NM_updateMetadata [label="updateMetadata(uint256,Metadata)\n→ void\nUpdates existing metadata", fillcolor="#4a9eff", shape="box"]
        NM_deleteMetadata [label="deleteMetadata(uint256)\n→ void\nRemoves metadata entry", fillcolor="#4a9eff", shape="box"]
        NM_getMetadata [label="getMetadata(uint256)\n→ Metadata\nRetrieves metadata", fillcolor="#4a9eff", shape="box"]
        NM_metadataExists [label="metadataExists(uint256)\n→ bool\nChecks if metadata exists", fillcolor="#4a9eff", shape="box"]
        NM_metadataExistsInternal [label="_metadataExists(uint256)\n→ bool\nInternal check", fillcolor="#4a9eff", shape="box"]
    }
    
    // AIServiceAgreementManagement
    subgraph cluster_AIServiceAgreement {
        label="AIServiceAgreementManagement"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        ASA_masterAccessControl [label="masterAccessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        ASA_nftAccessControl [label="nftAccessControl\n(NFTAccessControl)", fillcolor="#ff9f4a", shape="box"]
        ASA_access_sale [label="access_sale\n(mapping → AccessSaleDetails)", fillcolor="#ff9f4a", shape="box"]
        ASA_subscription_sale [label="subscription_sale\n(mapping → SubscriptionDetails)", fillcolor="#ff9f4a", shape="box"]
        ASA_total_active_access [label="total_active_access_sales\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        ASA_total_active_subs [label="total_active_subscriptions\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        ASA_constructor [label="constructor(2 addresses)\n→ void\nInitializes references", fillcolor="#4a9eff", shape="box"]
        ASA_recordAccessSale [label="recordAccessSale(5 params)\n→ void\nRecords new access purchase", fillcolor="#4a9eff", shape="box"]
        ASA_recordSubscriptionSale [label="recordSubscriptionSale(4 params)\n→ void\nRecords new subscription", fillcolor="#4a9eff", shape="box"]
        ASA_hasActiveAccess [label="hasActiveAccess(uint256,address)\n→ bool\nChecks active paid access", fillcolor="#4a9eff", shape="box"]
        ASA_getTotalActiveAccess [label="getTotalActiveAccess(uint256)\n→ uint256\nReturns total active access", fillcolor="#4a9eff", shape="box"]
        ASA_batchReevaluate [label="batchReevaluate(uint256,address[])\n→ void\nRemoves expired access", fillcolor="#4a9eff", shape="box"]
        ASA_hasActiveSubscriptions [label="hasActiveSubscriptions(uint256)\n→ bool\nChecks if NFT has active subs", fillcolor="#4a9eff", shape="box"]
        ASA_hasActiveAccessSales [label="hasActiveAccessSales(uint256)\n→ bool\nChecks if NFT has active sales", fillcolor="#4a9eff", shape="box"]
        ASA_getAccessSaleDetails [label="getAccessSaleDetails(uint256,address)\n→ AccessSaleDetails\nReturns sale details", fillcolor="#4a9eff", shape="box"]
        ASA_getSubscriptionDetails [label="getSubscriptionDetails(uint256,address)\n→ SubscriptionDetails\nReturns subscription details", fillcolor="#4a9eff", shape="box"]
    }
    
    // Monetization
    subgraph cluster_Monetization {
        label="Monetization"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables (selected key ones due to space)
        M_masterAccessControl [label="masterAccessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        M_nftContract [label="nftContract\n(NFTContract)", fillcolor="#ff9f4a", shape="box"]
        M_nftAccessControl [label="nftAccessControl\n(NFTAccessControl)", fillcolor="#ff9f4a", shape="box"]
        M_nftMetadata [label="nftMetadata\n(NFTMetadata)", fillcolor="#ff9f4a", shape="box"]
        M_aiServiceAgreement [label="aiServiceAgreementManagement\n(AIServiceAgreementManagement)", fillcolor="#ff9f4a", shape="box"]
        M_commission [label="commission_percentage\n(uint256)", fillcolor="#ff9f4a", shape="box"]
        M_subscriptionHandler [label="subscriptionHandlerPublicKey\n(address)", fillcolor="#ff9f4a", shape="box"]
        M_monetization_combo [label="monetization_combination\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_commitmentTime [label="commitmentTime\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_noticeBeforeUnlock [label="noticeBeforeUnlockCommitment\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_payPerUseData [label="payPerUseData\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_subscriptionData [label="subscriptionData\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_buyAccessData [label="buyAccessData\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_buyOwnershipData [label="buyOwnershipData\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_buyReplicaData [label="buyReplicaData\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_lockOpensDate [label="lockOpensDate\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        M_platformOwner [label="platformOwner\n(address)", fillcolor="#ff9f4a", shape="box"]
        
        // Key Functions
        M_constructor [label="constructor(5 addresses)\n→ void\nInitializes all references", fillcolor="#4a9eff", shape="box"]
        M_setCommissionPercentage [label="setCommissionPercentage(uint256)\n→ void\nSets platform commission", fillcolor="#4a9eff", shape="box"]
        M_setCommitmentTime [label="setCommitmentTime(uint256,uint256)\n→ void\nSets NFT commitment time", fillcolor="#4a9eff", shape="box"]
        M_setNoticeBeforeUnlock [label="setNoticeBeforeUnlockCommitment(uint256,uint256)\n→ void\nSets notice period", fillcolor="#4a9eff", shape="box"]
        M_enablePayPerUse [label="enablePayPerUse(3 params)\n→ void\nEnables pay-per-use model", fillcolor="#4a9eff", shape="box"]
        M_enableSubscription [label="enableSubscription(5 params)\n→ void\nEnables subscription model", fillcolor="#4a9eff", shape="box"]
        M_enableBuyAccess [label="enableBuyAccess(4 params)\n→ void\nEnables access purchase", fillcolor="#4a9eff", shape="box"]
        M_enableBuyOwnership [label="enableBuyOwnership(3 params)\n→ void\nEnables ownership sale", fillcolor="#4a9eff", shape="box"]
        M_enableBuyReplica [label="enableBuyReplica(3 params)\n→ void\nEnables replica creation", fillcolor="#4a9eff", shape="box"]
        M_disablePayPerUse [label="disablePayPerUse(uint256)\n→ void\nDisables pay-per-use", fillcolor="#4a9eff", shape="box"]
        M_disableSubscription [label="disableSubscription(uint256)\n→ void\nDisables subscription", fillcolor="#4a9eff", shape="box"]
        M_disableBuyAccess [label="disableBuyAccess(uint256)\n→ void\nDisables buy access", fillcolor="#4a9eff", shape="box"]
        M_buyOwnership [label="buyOwnership(uint256)\npayable → void\nPurchase NFT ownership", fillcolor="#4a9eff", shape="box"]
        M_buyReplica [label="buyReplica(uint256)\npayable → uint256\nPurchase NFT replica", fillcolor="#4a9eff", shape="box"]
        M_buyAccess [label="buyAccess(uint256)\npayable → void\nPurchase temporary access", fillcolor="#4a9eff", shape="box"]
        M_startUnlockProcess [label="startUnlockProcess(uint256)\n→ void\nInitiates unlock for committed NFT", fillcolor="#4a9eff", shape="box"]
        M_completeUnlock [label="completeUnlock(uint256)\n→ void\nCompletes unlock process", fillcolor="#4a9eff", shape="box"]
        M_cleanupMonetization [label="cleanupMonetization(uint256)\n→ void\nCleans up when NFT burned", fillcolor="#4a9eff", shape="box"]
        M_setAllMonetizationOptions [label="setAllMonetizationOptions(...)\n→ void\nComposite function", fillcolor="#4a9eff", shape="box"]
        M_processMonetizationOptions [label="_processMonetizationOptions(...)\n→ void\n(private) Process options", fillcolor="#4a9eff", shape="box"]
        M_updateMonetizationOption [label="_updateMonetizationOption(...)\n→ void\n(private) Update option", fillcolor="#4a9eff", shape="box"]
        M_startUnlockProcessInternal [label="_startUnlockProcess(nftId)\n→ void\n(private) Internal unlock", fillcolor="#4a9eff", shape="box"]
        M_disableAllMonetizationOptions [label="_disableAllMonetizationOptions(nftId)\n→ void\n(private) Disable all", fillcolor="#4a9eff", shape="box"]

        M_nftAgentWallet [label="nftAgentWallet\n(NFTAgentWallet)", fillcolor="#ff9f4a", shape="box"]
        M_registerNFTAgentWallet [label="registerNFTAgentWallet(nftId,signature,agentWallet)\n→ void\nRegisters agent wallet for NFT", fillcolor="#4a9eff", shape="box"]
        M_updateNFTAgentWallet [label="updateNFTAgentWallet(nftId,signature,newAgentWallet)\n→ void\nUpdates agent wallet for NFT", fillcolor="#4a9eff", shape="box"]
    }
    
    // Inter-contract connections (dotted lines)
    // Read operations (white)
    // Write operations (#87CEEB - light blue)
    
    // MasterAccessControl connections
    NAC_accessControl -> MAC_selfCheckAccess [style="dotted", color="white"]
    NAC_setMaxAccessLevel -> MAC_selfCheckAccess [style="dotted", color="white"]
    NAC_setDefaultAccessLevel -> MAC_selfCheckAccess [style="dotted", color="white"]
    NAC_grantAccess -> MAC_selfCheckAccess [style="dotted", color="white"]
    NAC_revokeAccess -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    NM_accessControl -> MAC_selfCheckAccess [style="dotted", color="white"]
    NM_createMetadata -> MAC_selfCheckAccess [style="dotted", color="white"]
    NM_replicateNFT -> MAC_selfCheckAccess [style="dotted", color="white"]
    NM_deleteMetadata -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    ASA_masterAccessControl -> MAC_selfCheckAccess [style="dotted", color="white"]
    ASA_recordAccessSale -> MAC_selfCheckAccess [style="dotted", color="white"]
    ASA_recordSubscriptionSale -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    M_masterAccessControl -> MAC_selfCheckAccess [style="dotted", color="white"]
    M_setCommissionPercentage -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    NC_masterAccessControl -> MAC_selfCheckAccess [style="dotted", color="white"]
    NC_setMonetization -> MAC_selfCheckAccess [style="dotted", color="white"]
    NC_lockNFT -> MAC_selfCheckAccess [style="dotted", color="white"]
    NC_startUnlocking -> MAC_selfCheckAccess [style="dotted", color="white"]
    NC_markCanBeUnlocked -> MAC_selfCheckAccess [style="dotted", color="white"]
    NC_unlockNFT -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    NAC_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    NM_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    ASA_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    M_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    NC_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    
    // NFTAccessControl connections from other contracts
    NAC_revokeAccess -> ASA_hasActiveAccess [style="dotted", color="white"]
    NAC_canRevokeAccess -> ASA_hasActiveAccess [style="dotted", color="white"]
    
    NC_createNFT -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    NC_burnNFT -> NAC_revokeAccess [style="dotted", color="#87CEEB"]
    NC_transfer -> NAC_getAccessLevel [style="dotted", color="white"]
    NC_transfer -> NAC_revokeAccess [style="dotted", color="#87CEEB"]
    NC_transfer -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    
    NM_createMetadata -> NAC_checkMinimumAccess [style="dotted", color="white"]
    NM_updateMetadata -> NAC_checkMinimumAccess [style="dotted", color="white"]
    
    ASA_batchReevaluate -> NAC_checkMinimumAccess [style="dotted", color="white"]
    
    M_enablePayPerUse -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    M_enableSubscription -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    M_buyOwnership -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    M_buyAccess -> NAC_grantAccess [style="dotted", color="#87CEEB"]
    M_disablePayPerUse -> NAC_canRevokeAccess [style="dotted", color="white"]
    M_disablePayPerUse -> NAC_revokeAccess [style="dotted", color="#87CEEB"]
    M_disableSubscription -> NAC_canRevokeAccess [style="dotted", color="white"]
    M_disableSubscription -> NAC_revokeAccess [style="dotted", color="#87CEEB"]
    
    // NFTContract connections from other contracts
    NC_burnNFT -> NM_metadataExists [style="dotted", color="white"]
    NC_burnNFT -> NM_deleteMetadata [style="dotted", color="#87CEEB"]
    NC_burnNFT -> M_cleanupMonetization [style="dotted", color="#87CEEB"]
    
    M_setCommitmentTime -> NC_getLockStatus [style="dotted", color="white"]
    M_setNoticeBeforeUnlock -> NC_getLockStatus [style="dotted", color="white"]
    M_enablePayPerUse -> NC_getNFTInfo [style="dotted", color="white"]
    M_enablePayPerUse -> NC_getLockStatus [style="dotted", color="white"]
    M_enablePayPerUse -> NC_lockNFT [style="dotted", color="#87CEEB"]
    M_enableSubscription -> NC_getNFTInfo [style="dotted", color="white"]
    M_enableSubscription -> NC_getLockStatus [style="dotted", color="white"]
    M_enableSubscription -> NC_lockNFT [style="dotted", color="#87CEEB"]
    M_enableBuyAccess -> NC_getNFTInfo [style="dotted", color="white"]
    M_enableBuyAccess -> NC_getLockStatus [style="dotted", color="white"]
    M_enableBuyOwnership -> NC_getNFTInfo [style="dotted", color="white"]
    M_enableBuyReplica -> NC_getNFTInfo [style="dotted", color="white"]
    M_buyOwnership -> NC_getLockStatus [style="dotted", color="white"]
    M_buyOwnership -> NC_getNFTInfo [style="dotted", color="white"]
    M_buyOwnership -> NC_safeTransferFrom [style="dotted", color="#87CEEB"]
    M_buyReplica -> NC_getNFTInfo [style="dotted", color="white"]
    M_buyReplica -> NC_createNFT [style="dotted", color="#87CEEB"]
    M_buyReplica -> NC_safeTransferFrom [style="dotted", color="#87CEEB"]
    M_buyAccess -> NC_getNFTInfo [style="dotted", color="white"]
    M_startUnlockProcess -> NC_getLockStatus [style="dotted", color="white"]
    M_startUnlockProcess -> NC_startUnlocking [style="dotted", color="#87CEEB"]
    M_completeUnlock -> NC_getLockStatus [style="dotted", color="white"]
    M_completeUnlock -> NC_markCanBeUnlocked [style="dotted", color="#87CEEB"]
    M_completeUnlock -> NC_unlockNFT [style="dotted", color="#87CEEB"]
    
    // NFTMetadata connections from other contracts
    M_enablePayPerUse -> NM_getMetadata [style="dotted", color="white"]
    M_enableSubscription -> NM_getMetadata [style="dotted", color="white"]
    M_enableBuyAccess -> NM_getMetadata [style="dotted", color="white"]
    M_enableBuyReplica -> NM_getMetadata [style="dotted", color="white"]
    M_buyReplica -> NM_replicateNFT [style="dotted", color="#87CEEB"]
    M_setAllMonetizationOptions -> NM_getMetadata [style="dotted", color="white"]
    
    // AIServiceAgreementManagement connections from other contracts
    M_buyAccess -> ASA_recordAccessSale [style="dotted", color="#87CEEB"]
    M_disablePayPerUse -> ASA_hasActiveSubscriptions [style="dotted", color="white"]
    M_disableSubscription -> ASA_hasActiveSubscriptions [style="dotted", color="white"]
    M_disableBuyAccess -> ASA_hasActiveAccessSales [style="dotted", color="white"]
    M_startUnlockProcess -> ASA_hasActiveSubscriptions [style="dotted", color="white"]
    M_startUnlockProcess -> ASA_hasActiveAccessSales [style="dotted", color="white"]
    M_completeUnlock -> ASA_hasActiveSubscriptions [style="dotted", color="white"]
    M_completeUnlock -> ASA_hasActiveAccessSales [style="dotted", color="white"]
    
    // Intra-contract connections (normal lines)
    // MasterAccessControl internal
    MAC_grantAccess -> MAC_accessRights [color="#87CEEB"]
    MAC_revokeAccess -> MAC_accessRights [color="#87CEEB"]
    MAC_grantSelfAccess -> MAC_accessRights [color="#87CEEB"]
    MAC_revokeSelfAccess -> MAC_accessRights [color="#87CEEB"]
    MAC_hasAccess -> MAC_accessRights [color="white"]
    MAC_selfCheckAccess -> MAC_accessRights [color="white"]
    
    // NFTAccessControl internal
    NAC_setMaxAccessLevel -> NAC_maxAccessLevel [color="#87CEEB"]
    NAC_setDefaultAccessLevel -> NAC_defaultAccessLevel [color="#87CEEB"]
    NAC_setDefaultAccessLevel -> NAC_maxAccessLevel [color="white"]
    NAC_grantAccess -> NAC_nftAccess [color="#87CEEB"]
    NAC_grantAccess -> NAC_updateUserAccessList [color="#87CEEB"]
    NAC_grantAccess -> NAC_updateNFTAccessList [color="#87CEEB"]
    NAC_grantAccess -> NAC_maxAccessLevel [color="white"]
    NAC_revokeAccess -> NAC_nftAccess [color="#87CEEB"]
    NAC_revokeAccess -> NAC_updateUserAccessListOnRevoke [color="#87CEEB"]
    NAC_revokeAccess -> NAC_updateNFTAccessListOnRevoke [color="#87CEEB"]
    NAC_updateUserAccessListOnRevoke -> NAC_userAccessList [color="#87CEEB"]
    NAC_updateUserAccessListOnRevoke -> NAC_userAccessIndex [color="#87CEEB"]
    NAC_updateNFTAccessListOnRevoke -> NAC_nftAccessList [color="#87CEEB"]
    NAC_updateNFTAccessListOnRevoke -> NAC_nftAccessIndex [color="#87CEEB"]
    NAC_getAllAccessForUser -> NAC_userAccessList [color="white"]
    NAC_getAccessLevel -> NAC_nftAccess [color="white"]
    NAC_getAccessLevel -> NAC_defaultAccessLevel [color="white"]
    NAC_checkMinimumAccess -> NAC_defaultAccessLevel [color="white"]
    NAC_checkMinimumAccess -> NAC_nftAccess [color="white"]
    NAC_getAllUsersAccessForNFT -> NAC_nftAccessList [color="white"]
    NAC_updateUserAccessList -> NAC_userAccessList [color="#87CEEB"]
    NAC_updateUserAccessList -> NAC_userAccessIndex [color="#87CEEB"]
    NAC_updateNFTAccessList -> NAC_nftAccessList [color="#87CEEB"]
    NAC_updateNFTAccessList -> NAC_nftAccessIndex [color="#87CEEB"]
    
    // NFTContract internal
    NC_createNFT -> NC_nfts [color="#87CEEB"]
    NC_createNFT -> NC_locked [color="#87CEEB"]
    NC_createNFT -> NC_balances [color="#87CEEB"]
    NC_createNFT -> NC_totalSupply [color="#87CEEB"]
    NC_burnNFT -> NC_nfts [color="#87CEEB"]
    NC_burnNFT -> NC_locked [color="#87CEEB"]
    NC_burnNFT -> NC_balances [color="#87CEEB"]
    NC_burnNFT -> NC_tokenApprovals [color="#87CEEB"]
    NC_lockNFT -> NC_locked [color="#87CEEB"]
    NC_startUnlocking -> NC_locked [color="#87CEEB"]
    NC_markCanBeUnlocked -> NC_locked [color="#87CEEB"]
    NC_unlockNFT -> NC_locked [color="#87CEEB"]
    NC_getLockStatus -> NC_locked [color="white"]
    NC_getNFTInfo -> NC_nfts [color="white"]
    NC_balanceOf -> NC_balances [color="white"]
    NC_ownerOf -> NC_nfts [color="white"]
    NC_transferNFT -> NC_safeTransferFrom [color="#87CEEB"]
    NC_safeTransferFrom -> NC_transfer [color="#87CEEB"]
    NC_transferFrom -> NC_transfer [color="#87CEEB"]
    NC_transfer -> NC_nfts [color="#87CEEB"]
    NC_transfer -> NC_tokenApprovals [color="#87CEEB"]
    NC_transfer -> NC_balances [color="#87CEEB"]
    NC_transfer -> NC_locked [color="white"]
    NC_burnNFT -> NC_exists [color="white"]
    NC_lockNFT -> NC_exists [color="white"]
    NC_startUnlocking -> NC_exists [color="white"]
    NC_markCanBeUnlocked -> NC_exists [color="white"]
    NC_unlockNFT -> NC_exists [color="white"]
    NC_getLockStatus -> NC_exists [color="white"]
    NC_getNFTInfo -> NC_exists [color="white"]
    NC_getApproved -> NC_exists [color="white"]
    NC_exists -> NC_nfts [color="white"]
    NC_safeTransferFrom -> NC_isApprovedOrOwner [color="white"]
    NC_safeTransferFrom -> NC_safeTransfer [color="#87CEEB"]
    NC_transferFrom -> NC_isApprovedOrOwner [color="white"]
    NC_safeTransfer -> NC_transfer [color="#87CEEB"]
    NC_safeTransfer -> NC_checkOnERC721Received [color="white"]
    NC_isApprovedOrOwner -> NC_exists [color="white"]
    NC_isApprovedOrOwner -> NC_ownerOf [color="white"]
    NC_isApprovedOrOwner -> NC_getApproved [color="white"]
    NC_isApprovedOrOwner -> NC_isApprovedForAll [color="white"]
    NC_checkOnERC721Received -> NC_isContract [color="white"]
    NC_approve -> NC_ownerOf [color="white"]
    NC_approve -> NC_isApprovedForAll [color="white"]
    NC_approve -> NC_tokenApprovals [color="#87CEEB"]
    NC_setApprovalForAll -> NC_operatorApprovals [color="#87CEEB"]
    NC_getApproved -> NC_tokenApprovals [color="white"]
    NC_isApprovedForAll -> NC_operatorApprovals [color="white"]
    
    // NFTMetadata internal
    NM_createMetadata -> NM_metadataMap [color="#87CEEB"]
    NM_createMetadata -> NM_metadataExistsInternal [color="white"]
    NM_replicateNFT -> NM_metadataMap [color="#87CEEB"]
    NM_replicateNFT -> NM_replicaMap [color="#87CEEB"]
    NM_replicateNFT -> NM_metadataExistsInternal [color="white"]
    NM_updateMetadata -> NM_metadataMap [color="#87CEEB"]
    NM_updateMetadata -> NM_metadataExistsInternal [color="white"]
    NM_deleteMetadata -> NM_metadataMap [color="#87CEEB"]
    NM_deleteMetadata -> NM_replicaMap [color="#87CEEB"]
    NM_deleteMetadata -> NM_metadataExistsInternal [color="white"]
    NM_getMetadata -> NM_metadataMap [color="white"]
    NM_getMetadata -> NM_metadataExistsInternal [color="white"]
    NM_metadataExists -> NM_metadataMap [color="white"]
    NM_metadataExistsInternal -> NM_metadataMap [color="white"]
    
    // AIServiceAgreementManagement internal
    ASA_recordAccessSale -> ASA_access_sale [color="#87CEEB"]
    ASA_recordAccessSale -> ASA_total_active_access [color="#87CEEB"]
    ASA_recordSubscriptionSale -> ASA_subscription_sale [color="#87CEEB"]
    ASA_recordSubscriptionSale -> ASA_total_active_subs [color="#87CEEB"]
    ASA_hasActiveAccess -> ASA_access_sale [color="white"]
    ASA_hasActiveAccess -> ASA_subscription_sale [color="white"]
    ASA_getTotalActiveAccess -> ASA_total_active_access [color="white"]
    ASA_getTotalActiveAccess -> ASA_total_active_subs [color="white"]
    ASA_batchReevaluate -> ASA_access_sale [color="#87CEEB"]
    ASA_batchReevaluate -> ASA_subscription_sale [color="#87CEEB"]
    ASA_batchReevaluate -> ASA_total_active_access [color="#87CEEB"]
    ASA_batchReevaluate -> ASA_total_active_subs [color="#87CEEB"]
    ASA_getAccessSaleDetails -> ASA_access_sale [color="white"]
    ASA_getSubscriptionDetails -> ASA_subscription_sale [color="white"]
    ASA_hasActiveSubscriptions -> ASA_total_active_subs [color="white"]
    ASA_hasActiveAccessSales -> ASA_total_active_access [color="white"]
    
    // Monetization internal
    M_setCommitmentTime -> M_commitmentTime [color="#87CEEB"]
    M_setNoticeBeforeUnlock -> M_noticeBeforeUnlock [color="#87CEEB"]
    M_enablePayPerUse -> M_payPerUseData [color="#87CEEB"]
    M_enablePayPerUse -> M_monetization_combo [color="#87CEEB"]
    M_enablePayPerUse -> M_commitmentTime [color="white"]
    M_enablePayPerUse -> M_noticeBeforeUnlock [color="white"]
    M_enableSubscription -> M_subscriptionData [color="#87CEEB"]
    M_enableSubscription -> M_monetization_combo [color="#87CEEB"]
    M_enableBuyAccess -> M_buyAccessData [color="#87CEEB"]
    M_enableBuyAccess -> M_monetization_combo [color="#87CEEB"]
    M_enableBuyOwnership -> M_buyOwnershipData [color="#87CEEB"]
    M_enableBuyOwnership -> M_monetization_combo [color="#87CEEB"]
    M_enableBuyReplica -> M_buyReplicaData [color="#87CEEB"]
    M_enableBuyReplica -> M_monetization_combo [color="#87CEEB"]
    M_disablePayPerUse -> M_payPerUseData [color="#87CEEB"]
    M_disablePayPerUse -> M_monetization_combo [color="#87CEEB"]
    M_disableSubscription -> M_subscriptionData [color="#87CEEB"]
    M_disableSubscription -> M_monetization_combo [color="#87CEEB"]
    M_disableBuyAccess -> M_buyAccessData [color="#87CEEB"]
    M_disableBuyAccess -> M_monetization_combo [color="#87CEEB"]
    M_buyOwnership -> M_buyOwnershipData [color="white"]
    M_buyOwnership -> M_commission [color="white"]
    M_buyReplica -> M_buyReplicaData [color="white"]
    M_buyReplica -> M_commission [color="white"]
    M_buyAccess -> M_buyAccessData [color="white"]
    M_buyAccess -> M_commission [color="white"]
    M_buyAccess -> M_commitmentTime [color="white"]
    M_startUnlockProcess -> M_commitmentTime [color="white"]
    M_startUnlockProcess -> M_noticeBeforeUnlock [color="white"]
    M_cleanupMonetization -> M_commitmentTime [color="#87CEEB"]
    M_cleanupMonetization -> M_noticeBeforeUnlock [color="#87CEEB"]
    M_cleanupMonetization -> M_monetization_combo [color="#87CEEB"]
    M_cleanupMonetization -> M_disableAllMonetizationOptions [color="#87CEEB"]
    M_cleanupMonetization -> M_lockOpensDate [color="#87CEEB"]
    M_setAllMonetizationOptions -> M_processMonetizationOptions [color="#87CEEB"]
    M_processMonetizationOptions -> M_updateMonetizationOption [color="#87CEEB"]
    M_processMonetizationOptions -> NM_getMetadata [style="dotted", color="white"]
    M_updateMonetizationOption -> M_disablePayPerUse [color="#87CEEB"]
    M_updateMonetizationOption -> M_disableSubscription [color="#87CEEB"]
    M_updateMonetizationOption -> M_disableBuyAccess [color="#87CEEB"]
    M_updateMonetizationOption -> M_disableBuyOwnership [color="#87CEEB"]
    M_updateMonetizationOption -> M_disableBuyReplica [color="#87CEEB"]
    M_disablePayPerUse -> M_startUnlockProcessInternal [color="#87CEEB"]
    M_disableSubscription -> M_startUnlockProcessInternal [color="#87CEEB"]
    M_disableBuyAccess -> M_startUnlockProcessInternal [color="#87CEEB"]
    M_startUnlockProcess -> M_lockOpensDate [color="#87CEEB"]
    M_startUnlockProcessInternal -> M_lockOpensDate [color="#87CEEB"]
    M_startUnlockProcessInternal -> ASA_hasActiveSubscriptions [style="dotted", color="white"]
    M_startUnlockProcessInternal -> ASA_hasActiveAccessSales [style="dotted", color="white"]
    M_startUnlockProcessInternal -> NC_startUnlocking [style="dotted", color="#87CEEB"]
    M_buyOwnership -> M_disableAllMonetizationOptions [color="#87CEEB"]
    M_buyOwnership -> M_platformOwner [color="white"]
    M_buyReplica -> M_platformOwner [color="white"]
    M_buyAccess -> M_platformOwner [color="white"]
    M_disableAllMonetizationOptions -> NAC_canRevokeAccess [style="dotted", color="white"]
    M_disableAllMonetizationOptions -> NAC_revokeAccess [style="dotted", color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_payPerUseData [color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_subscriptionData [color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_buyAccessData [color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_buyOwnershipData [color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_buyReplicaData [color="#87CEEB"]
    M_disableAllMonetizationOptions -> M_monetization_combo [color="#87CEEB"]
    
    // UserAgentWallet Contract
    subgraph cluster_UserAgentWallet {
        label="UserAgentWallet"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        UAW_userToAgent [label="userToAgent\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        UAW_agentToUser [label="agentToUser\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        UAW_registerAgentWallet [label="registerAgentWallet(signature,agentWallet)\n→ void\nRegisters agent wallet with signature", fillcolor="#4a9eff", shape="box"]
        UAW_updateAgentWallet [label="updateAgentWallet(signature,newAgentWallet)\n→ void\nUpdates agent wallet", fillcolor="#4a9eff", shape="box"]
        UAW_getUserWallet [label="getUserWallet(agentWallet)\n→ address\nReturns user wallet", fillcolor="#4a9eff", shape="box"]
        UAW_getAgentWallet [label="getAgentWallet(userWallet)\n→ address\nReturns agent wallet", fillcolor="#4a9eff", shape="box"]
        UAW_hasAgentWallet [label="hasAgentWallet(userWallet)\n→ bool\nChecks if user has agent", fillcolor="#4a9eff", shape="box"]
        UAW_isAgentWalletAssigned [label="isAgentWalletAssigned(agentWallet)\n→ bool\nChecks if agent assigned", fillcolor="#4a9eff", shape="box"]
        UAW_addressToString [label="addressToString(address)\n→ string\n(private) Helper function", fillcolor="#4a9eff", shape="box"]
        UAW_getEthSignedMessageHash [label="getEthSignedMessageHash(hash)\n→ bytes32\n(private) Hash helper", fillcolor="#4a9eff", shape="box"]
        UAW_recoverSigner [label="recoverSigner(hash,signature)\n→ address\n(private) Sig recovery", fillcolor="#4a9eff", shape="box"]
    }
    
    // NFTAgentWallet Contract
    subgraph cluster_NFTAgentWallet {
        label="NFTAgentWallet"
        bgcolor="#2d2d2d"
        color="white"
        
        // Variables
        NAW_masterAccessControl [label="masterAccessControl\n(MasterAccessControl)", fillcolor="#ff9f4a", shape="box"]
        NAW_nftToAgent [label="nftToAgent\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        NAW_agentToNft [label="agentToNft\n(mapping)", fillcolor="#ff9f4a", shape="box"]
        
        // Functions
        NAW_constructor [label="constructor(address)\n→ void\nInitializes with MasterAccessControl", fillcolor="#4a9eff", shape="box"]
        NAW_registerAgentWallet [label="registerAgentWallet(nftId,signature,agentWallet)\n→ void\nRegisters agent for NFT", fillcolor="#4a9eff", shape="box"]
        NAW_updateAgentWallet [label="updateAgentWallet(nftId,signature,newAgentWallet)\n→ void\nUpdates agent for NFT", fillcolor="#4a9eff", shape="box"]
        NAW_getNFTId [label="getNFTId(agentWallet)\n→ uint256\nReturns NFT ID", fillcolor="#4a9eff", shape="box"]
        NAW_getAgentWallet [label="getAgentWallet(nftId)\n→ address\nReturns agent wallet", fillcolor="#4a9eff", shape="box"]
        NAW_hasAgentWallet [label="hasAgentWallet(nftId)\n→ bool\nChecks if NFT has agent", fillcolor="#4a9eff", shape="box"]
        NAW_isAgentWalletAssigned [label="isAgentWalletAssigned(agentWallet)\n→ bool\nChecks if agent assigned", fillcolor="#4a9eff", shape="box"]
        NAW_addressToString [label="addressToString(address)\n→ string\n(private) Helper function", fillcolor="#4a9eff", shape="box"]
        NAW_uint256ToString [label="uint256ToString(uint256)\n→ string\n(private) Helper function", fillcolor="#4a9eff", shape="box"]
        NAW_getEthSignedMessageHash [label="getEthSignedMessageHash(hash)\n→ bytes32\n(private) Hash helper", fillcolor="#4a9eff", shape="box"]
        NAW_recoverSigner [label="recoverSigner(hash,signature)\n→ address\n(private) Sig recovery", fillcolor="#4a9eff", shape="box"]
    }
    

    
    // UserAgentWallet internal connections
    UAW_registerAgentWallet -> UAW_userToAgent [color="#87CEEB"]
    UAW_registerAgentWallet -> UAW_agentToUser [color="#87CEEB"]
    UAW_updateAgentWallet -> UAW_userToAgent [color="#87CEEB"]
    UAW_updateAgentWallet -> UAW_agentToUser [color="#87CEEB"]
    UAW_getUserWallet -> UAW_agentToUser [color="white"]
    UAW_getAgentWallet -> UAW_userToAgent [color="white"]
    UAW_hasAgentWallet -> UAW_userToAgent [color="white"]
    UAW_isAgentWalletAssigned -> UAW_agentToUser [color="white"]
    UAW_registerAgentWallet -> UAW_addressToString [color="white"]
    UAW_registerAgentWallet -> UAW_getEthSignedMessageHash [color="white"]
    UAW_registerAgentWallet -> UAW_recoverSigner [color="white"]
    UAW_updateAgentWallet -> UAW_addressToString [color="white"]
    UAW_updateAgentWallet -> UAW_getEthSignedMessageHash [color="white"]
    UAW_updateAgentWallet -> UAW_recoverSigner [color="white"]
    
    // NFTAgentWallet internal connections
    NAW_constructor -> NAW_masterAccessControl [color="#87CEEB"]
    NAW_registerAgentWallet -> NAW_nftToAgent [color="#87CEEB"]
    NAW_registerAgentWallet -> NAW_agentToNft [color="#87CEEB"]
    NAW_registerAgentWallet -> NAW_masterAccessControl [color="white"]
    NAW_updateAgentWallet -> NAW_nftToAgent [color="#87CEEB"]
    NAW_updateAgentWallet -> NAW_agentToNft [color="#87CEEB"]
    NAW_updateAgentWallet -> NAW_masterAccessControl [color="white"]
    NAW_getNFTId -> NAW_agentToNft [color="white"]
    NAW_getAgentWallet -> NAW_nftToAgent [color="white"]
    NAW_hasAgentWallet -> NAW_nftToAgent [color="white"]
    NAW_isAgentWalletAssigned -> NAW_agentToNft [color="white"]
    NAW_registerAgentWallet -> NAW_uint256ToString [color="white"]
    NAW_registerAgentWallet -> NAW_addressToString [color="white"]
    NAW_registerAgentWallet -> NAW_getEthSignedMessageHash [color="white"]
    NAW_registerAgentWallet -> NAW_recoverSigner [color="white"]
    NAW_updateAgentWallet -> NAW_uint256ToString [color="white"]
    NAW_updateAgentWallet -> NAW_addressToString [color="white"]
    NAW_updateAgentWallet -> NAW_getEthSignedMessageHash [color="white"]
    NAW_updateAgentWallet -> NAW_recoverSigner [color="white"]
    
    // NFTAgentWallet connections from other contracts
    NAW_constructor -> MAC_grantSelfAccess [style="dotted", color="#87CEEB"]
    NAW_registerAgentWallet -> MAC_selfCheckAccess [style="dotted", color="white"]
    NAW_updateAgentWallet -> MAC_selfCheckAccess [style="dotted", color="white"]
    
    // Monetization to NFTAgentWallet connections
    M_registerNFTAgentWallet -> NAW_registerAgentWallet [style="dotted", color="#87CEEB"]
    M_updateNFTAgentWallet -> NAW_updateAgentWallet [style="dotted", color="#87CEEB"]
    M_registerNFTAgentWallet -> NC_getNFTInfo [style="dotted", color="white"]
    M_updateNFTAgentWallet -> NC_getNFTInfo [style="dotted", color="white"]
    M_registerNFTAgentWallet -> NAC_checkMinimumAccess [style="dotted", color="white"]
    M_updateNFTAgentWallet -> NAC_checkMinimumAccess [style="dotted", color="white"]
    M_setContractReferences -> M_nftAgentWallet [color="#87CEEB"]
    
rankdir=LR

    // Layout hints
    {rank=same; cluster_MasterAccessControl}
    {rank=same; cluster_NFTAccessControl; cluster_NFTContract; cluster_NFTMetadata}
    {rank=same; cluster_AIServiceAgreement; cluster_Monetization}
    {rank=same; cluster_UserAgentWallet; cluster_NFTAgentWallet}
}